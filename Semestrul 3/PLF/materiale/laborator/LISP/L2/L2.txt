; 11. Se da un arbore de tipul (2). Sa se afiseze nivelul 
;     (si lista corespunza-toarea nodurilor) 
;     avand numar maxim de noduri. Nivelul rad. se considera 0.

; (car l) - primul elementdin lista este radacina
; (cadr l) - al doilea element din lista, la nivelul superficial, e subarborele stang
; (caddr l) - al treilea element din lista, la nivelul superficial, e subarborele drept


; Predicatul concateneaza (lipeste) doua liste
; myAppend(l: list, p: list)

; myAppend(l1l2...ln, p1p2...pm) = 
; = p1p2...pm, daca n = 0
; = {l1} U myAppend(l2...ln, p1p2...pm), altfel

(defun myAppend (l p)
  (cond
    ((null l) p)
    (t (cons (car l) (myAppend (cdr l) p)))
  )
)

; Predicatul returneaza elemenul maxim dintre a si b
; myMax(a:integer, b:integer)

; myMax(a,b) = 
; = a, daca a > b
; = b, altfel

(defun myMax(a b)
  (cond
    ((> a b) a)
    (t b)
  )
)


; Predicatul returneaza nivelul care are elementele maxime arborelui
; findLevel(l:lista, elem:integer, counter:integer)

; findLevel(l1l2l3, counter) = 
; = counter, daca l1l2l3 e gol
; = myMax(findLevel(l2, counter + 1),findLevel(l3, counter + 1)), altfel

(defun findMaxLevel(l counter)
  (cond
    ((null l) counter)
    (t (myMax (findMaxLevel (cadr l) (+ 1 counter)) (findMaxLevel (caddr l) (+ 1 counter))))
  )
)


; Predicatul returneaza nodurile de la un nivel
; nodesFromLevel(l:list, level:integer, counter:integer)

; nodesFromLevel(l1l2l3, level, counter) =
; = nil, daca l1l2l3 e gol
; = l1 , if counter = level
; = myAppend((list (nodesFromLevel(l2, level, counter + 1))) (list (nodesFromLevel(l3, level, counter + 1)))), altfel

(defun nodesFromLevel(l level counter)
  (cond
    ((null l) nil)
    ((equal counter level) (list (car l)))
    (t (myAppend (nodesFromLevel (cadr l) level (+ 1 counter)) (nodesFromLevel (caddr l) level (+ 1 counter))))
  )
)


; Predicatul returneaza nivelul unde sunt cele mai multe noduri si nodurile
; main(l:list)

; main(l1l2...ln) =
; = nodesFromLevel (l1...ln, findMaxLevel(l1...ln, -1), 0)

(defun main(l)
  (nodesFromLevel l (findMaxLevel l -1) 0)
)


(print( main '(A (B) (C (D) (E)))))